package com.jgc.crm.workbench.mapper;

import com.jgc.crm.workbench.domain.Activity;
import com.jgc.crm.workbench.domain.ActivityRemark;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Oct 27 16:04:34 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Oct 27 16:04:34 CST 2022
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Oct 27 16:04:34 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Oct 27 16:04:34 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Oct 27 16:04:34 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Oct 27 16:04:34 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 根据查询条件显示分页数据
     * @param map
     * @return
     */
    List<Activity> queryActivityByConditionFromPageNo(Map<String,Object> map);

    /**
     * 根据条件查询总条数
     * @param map
     * @return
     */
    int selectCountOfActivityCondition(Map<String,Object> map);

    /**
     * 根据传来的id数组批量删除市场活动
     * @param id
     * @return
     */
    int deleteActivityByIds(String[] id);

    /**
     * 根据id查询市场活动
     * @param id
     * @return
     */
    Activity queryActivityById(String id);

    /**
     * 根据活动所有者id修改活动信息
     * @param activity
     * @return
     */
    int updateActivityById(Activity activity);

    List<Activity> selectAllActivity();

    List<Activity> selectActivityByIds(String[] id);

    int insertActivityByFile(List<Activity> activityList);

    Activity selectActivityForDetailById(String id);

    List<Activity> selectActivityForClueId(String id);

    List<Activity> selectActivityForDetailByNameClueId(Map<String,Object> map);

    List<Activity> selectActivityFroDetailByIds(String[] id);

}